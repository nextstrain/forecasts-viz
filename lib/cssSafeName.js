/**
 * This script was generated by ChatGPT-4 from the prompt below. Given this
 * code is the output of ChatGPT-4 with human revision, we do not claim copyright and this script is
 * not covered by the same license as the rest of the repository.
 * https://chat.openai.com/share/196ba695-0ad8-4a58-a5e6-6fd1c482093a
 *
 * ---------------------------------------------------------------
 * is there a way non-safe css class names can be escaped rather than stripped? It's important to be able to keep those characters around because they have meaning, e.g. JN.1.4.3 is different from JN.1.43 - so stripping is not ok.
 * /**
 *  * Vendored from https://github.com/thawkin3/css-safe-classname
 *  * MIT licensed
 *  * https://github.com/thawkin3/css-safe-classname/blob/991003e9d2c29e1a3c6785bf9a057d78013cc2a6/LICENSE
 *  * @private
 *  */
/*
 *  const nonCssSafeCharacters = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~\s]/
 *
 *  const invalidBeginningOfClassname = /^([0-9]|--|-[0-9])/
 *
 *  export const cssSafeName = str => {
 *    if (typeof str !== 'string') {
 *      return ''
 *    }
 *
 *    const replacedClassName = str.replace(
 *      new RegExp(nonCssSafeCharacters, 'g'),
 *      '_'
 *    )
 *
 *    return invalidBeginningOfClassname.test(replacedClassName)
 *      ? `_${replacedClassName}`
 *      : replacedClassName
 *  }
 *
 */

const nonCssSafeCharacters = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~\s]/g;

const invalidBeginningOfClassname = /^([0-9]|--|-[0-9])/;

function encodeCharacter(c) {
  return '_' + c.charCodeAt(0).toString(16) + '_';
}

export const cssSafeName = str => {
  if (typeof str !== 'string') {
    return '';
  }

  let encodedClassName = str.replace(nonCssSafeCharacters, encodeCharacter);

  return invalidBeginningOfClassname.test(encodedClassName)
    ? `_${encodedClassName}`
    : encodedClassName
};